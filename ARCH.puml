@startuml
participant "Maxwell(Tests)" #lightgreen


box Maxwell's Demon Container #lightblue
participant "Maxwell's Demon" #lightgreen

== Initialize startup of env ==

"Maxwell(Tests)" -> "Maxwell's Demon" : up(id=123)
note right
{
    << envs >>
    << compose_files >>
    << parallelism >> # == 1?  ->  id=no_id
}
end note
activate "Maxwell's Demon"


participant "docker-compose(prefix=123)" #lightgreen
"Maxwell's Demon" -> "docker-compose(prefix=123)" **:

"Maxwell's Demon" -> "docker-compose(prefix=123)": up -d COMPOSE_FILE=<< compose_files >>
activate "docker-compose(prefix=123)"

box Host
participant "Docker server" #lightgreen
end box

"docker-compose(prefix=123)" -> "Docker server"

"Maxwell(Tests)" <-- "Maxwell's Demon" : ENV && << task scheduled >>
deactivate "Maxwell's Demon"


== Env state polling ==

"Maxwell(Tests)" -> "Maxwell's Demon" : get_status(id=123)
activate "Maxwell's Demon"

"Maxwell's Demon" -> "docker-compose(prefix=123)" : dc ps -a format=={{json .}}
"Maxwell's Demon" <-- "docker-compose(prefix=123)" : [ {service:status}, ... ]

return status{services} && not_done


"Maxwell's Demon" -> "docker-compose(prefix=123)": dc exec %service% hooks/migrations

"Maxwell's Demon" <-- "docker-compose(prefix=123)"



== Env state final polling ==

"Maxwell(Tests)" -> "Maxwell's Demon" : get_status(id=123)
activate "Maxwell's Demon"

"Maxwell's Demon" -> "docker-compose(prefix=123)" : dc ps -a format=={{json .}}
"Maxwell's Demon" <-- "docker-compose(prefix=123)" : [ {service:status}, ... ]

return status{services} && done
@enduml
